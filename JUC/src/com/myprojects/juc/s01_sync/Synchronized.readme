Synchronized:JVM底层实现的锁，在目前jdk版本中，引入锁升级的概念，效率不比其他锁差。
1.底层原理：在Hotspot虚拟机中，使用了锁升级概念，升级过程有四种锁状态。
①.首先处于无锁状态
②.Synchronized(object)会在对象头，也就是MarkWord中记录这个线程ID，属于偏向锁
③.如果多个线程争用锁，升级为自旋锁，也就是轻量级锁
④.线程自旋10次后还得不到锁，升级为重量级锁，找OS申请锁，此时线程加入队列，处于wait状态
2.细节：
①.锁的是对象，不是代码块
②.锁的必须是同一个对象，不然线程不能产生互斥
③.Synchronized与static一起修饰方法，相当于Synchronized(T.class)
④.Synchronized既能保证原子性，又能保证可见性。若已经用Synchronized修饰，就不用volatile修饰变量
⑤.在读写操作中，若只给写操作加锁，读操作不加锁，容易产生脏读
⑥.A同步方法想要在B同步方法内部执行，不受锁的影响，可以按顺序执行。前提是锁的都是同一个对象
⑦.父类加锁方法Synchronized(this)中的this指的是子类对象
⑧.程序在执行过程中出现异常，默认情况锁会释放。若不想被释放，可以在异常周围加上try-catch，输出异常信息，不影响程序执行